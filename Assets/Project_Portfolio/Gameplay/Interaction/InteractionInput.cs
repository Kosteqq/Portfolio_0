//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Project_Portfolio/Gameplay/Interaction/InteractionInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace ProjectPortfolio.Gameplay.Interaction
{
    public partial class @InteractionInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InteractionInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InteractionInput"",
    ""maps"": [
        {
            ""name"": ""UnitsManagement"",
            ""id"": ""1d31edd1-ff85-4f72-9f6e-6f6cf9afd65e"",
            ""actions"": [
                {
                    ""name"": ""SetPosition"",
                    ""type"": ""Button"",
                    ""id"": ""202e5b78-ca5c-4429-85ca-31b7b85f93ef"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2eb4fc3d-7355-4b53-a9e7-4ff8b7348d66"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // UnitsManagement
            m_UnitsManagement = asset.FindActionMap("UnitsManagement", throwIfNotFound: true);
            m_UnitsManagement_SetPosition = m_UnitsManagement.FindAction("SetPosition", throwIfNotFound: true);
        }

        ~@InteractionInput()
        {
            UnityEngine.Debug.Assert(!m_UnitsManagement.enabled, "This will cause a leak and performance issues, InteractionInput.UnitsManagement.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // UnitsManagement
        private readonly InputActionMap m_UnitsManagement;
        private List<IUnitsManagementActions> m_UnitsManagementActionsCallbackInterfaces = new List<IUnitsManagementActions>();
        private readonly InputAction m_UnitsManagement_SetPosition;
        public struct UnitsManagementActions
        {
            private @InteractionInput m_Wrapper;
            public UnitsManagementActions(@InteractionInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @SetPosition => m_Wrapper.m_UnitsManagement_SetPosition;
            public InputActionMap Get() { return m_Wrapper.m_UnitsManagement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UnitsManagementActions set) { return set.Get(); }
            public void AddCallbacks(IUnitsManagementActions instance)
            {
                if (instance == null || m_Wrapper.m_UnitsManagementActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UnitsManagementActionsCallbackInterfaces.Add(instance);
                @SetPosition.started += instance.OnSetPosition;
                @SetPosition.performed += instance.OnSetPosition;
                @SetPosition.canceled += instance.OnSetPosition;
            }

            private void UnregisterCallbacks(IUnitsManagementActions instance)
            {
                @SetPosition.started -= instance.OnSetPosition;
                @SetPosition.performed -= instance.OnSetPosition;
                @SetPosition.canceled -= instance.OnSetPosition;
            }

            public void RemoveCallbacks(IUnitsManagementActions instance)
            {
                if (m_Wrapper.m_UnitsManagementActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUnitsManagementActions instance)
            {
                foreach (var item in m_Wrapper.m_UnitsManagementActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UnitsManagementActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UnitsManagementActions @UnitsManagement => new UnitsManagementActions(this);
        public interface IUnitsManagementActions
        {
            void OnSetPosition(InputAction.CallbackContext context);
        }
    }
}
